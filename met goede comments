Require Import BenB.
Require Import BenB2.
Set Undo 5000.

(* ====================================================================== *)

(*
   Title: Simplified Cow Milking Machine
   ======
   Authors:
   Marc-William Verwoert (s4718801)
   Vera Tukke (s4766970)
   Madelief Rennspies (s4703103)
   Fu-Rianne Veens (4792424)

*)

(* ====================================================================== *)

(*
   [
     This file has to be a valid script, meaning that it
     can be executed by Coq.
     Therefore, explanations in natural language have to be between
     comment markers.

     In this project template, text within square brackets (within
     comment markers) is intended to clarify what needs to be
     written where.

     In the final version, we expect that all these blocks have been
     replaced by (your) proper content.
   ]
   
*)

(*
   Abstract:
   =========
   [
     For the intermediate version of this project:
     Explain briefly which perspective of which artifact will be
     studied and why this topic has been chosen.
     
     
    In this project, a cow milking device, which consists of a pulsator and a vacuum pump 
    connected to the teats of a cow will be studied,
    to investigate how such a device can result in a milk bottle being filled.
    This topic is chosen in this project due to an interesting story of one of the authors.
    She told the story of her dream of ice skating cows, which led to a conversation,
    between the authors about cows and their mutual interest in production of milk and the countryside.
    Since, milking of cows can be done non-automatically (with the hands),
    we were interested in the automatic side to the milking of cows via the usage of a cow milking device
    and thus it was decided to choose a cow milking device as the artefact of the project.

     
   ]

   [
     And for the final version of this project:
     Explain whether you managed to prove the correctness theorem.
     And how did that go: did you have to change a lot compared to
     the intermediate version, or could you use your formalization
     without many modifications?
   ]

*)

(*
   Focus:

   Modeling Goal:
   ==============
   Verification model

   Fragment of reality:
   ====================
   Cow milking device which consists of a vacuum pump, pulsator, teat cups, milk tube, power strip, and receiving bottle.
   Beside the milking device, we need a cow (that is able to produce milk), air, and a electricity supplier.

  Perspective:
   ============
   The simplified cow milking machine, milks cows
   automatically at the correct moment and when the bottle is filled, it stops milking.

*)



(*

   
   (*
   Abstractions or simplifications:
   ================================
   
    We are assuming that the time the cow takes to fill the receiving bottle is consistent,
    meaning that the amount of milk given over a period of time is always the same.
    Thus, the speed of milking is always the same and the total amount of milk (and hence the time being milked),
    is alwaysthe same.     
    Lastly, we are assuming that the outputs and the inputs from the power strip donâ€™t fluctuate with
    respect to the power.

    *)








(* ====================================================================== *)

(* Domain model *)

(* Domains (including their meaning) *)
Definition T := R.
    (* Time in tenths of seconds in real numbers. *)
Variable Cows : Set.
    (* The set of cows. *)
Variable Teats: Set.
    (* The set of teats. *)

(* Constants (including their meaning) *)


(* Functions (including their meaning) *)
Variable teatsFromCow (* c *): Cows -> Teats.
    (* Gets the teats of cow c. *)
Variable milking_time (* c *): Cows -> T.
    (* Gets the milking time of cow c. *)


(* Predicates (including their meaning and measurements) *)
Variable power_in (* t *) : T ->  Prop.
    (* A voltage of 230V is supplied on the plug of the power_strip at time t. *)
    (* Measure the voltage that is supplied on the plug of the power_strip at that time with a voltmeter. *)
    
Variable ps_out (* t *) : T -> Prop.
    (* A voltage of 230V is supplied from the power_strip at time t. *)
    (* Measure the voltage that is supplied from the power_strip at that time with a voltmeter. *)

Variable vacuum_power (* t *) : T -> Prop.
    (* A voltage of 230V is supplied from power_cable_1 at time t. *)
    (* Measure the voltage that is supplied from power_cable_1 at that time with a voltmeter. *)

Variable pulsator_power (* t *) : T -> Prop.
    (* A voltage of 230V is supplied from power_cable_2 at time t. *)
    (* Measure the voltage of power_cable_2 at that time with a voltmeter. *)
    
Variable vacuum_in (* t *) : T -> Prop.
    (* A vacuum of 15 Hg is supplied by the vacuum_tube, which causes air to escape into the pulsator at time t. *)
    (* Measure the vacuum supplied by vacuum_tube at that time with a vacuum gauge. *)
    
Variable vacuum_out (* t *) : T -> Prop.
    (* A vacuum of 15 Hg, which is supplied by the vacuum_pump, which causes air to escape into the vacuum_tube at time t. *)
    (* Measure the vacuum supplied by vacuum_pump at that time with a vacuum gauge. *)
    
Variable vacuum_pulses_out (* t *) : T -> Prop.
    (* Pulses of vacuum are being supplied to the pulsator_cup_cable at time t. *)
    (* Measure the vacuum supplied by pulsator at that time with a vacuum gauge. *)
    
Variable vacuum_pulses_in (* t *) : T -> Prop.
    (* Pulses of vacuum are being supplied by the pulsator_cup_cable at time t. *)
    (* Measure the vacuum  supplied by pulsator_cup_cable at that time with a vacuum gauge. *)
    
Variable cow_teats_in (* t s *): T -> Teats -> Prop.
    (* The teats s are in the teat_cups at time t. *)
    (* Look if teats s are in the teat_cups at that time. *)

Variable milk_out (* t c *): T -> Cows -> Prop.
    (* Milk of cow c comes out of the teat_cups at time t. *)
    (* Look if the milk of cow c comes out of the teat_cups at that time. *)

Variable bottle_being_filled (* t c *): T -> Cows -> Prop.
    (* The receiving_bottle is being filled with milk of cow c at time t. *)
    (* Look if the receiving bottle is being filled with milk at that time. *)
    
Variable filled_message (* t c *): T -> Cows -> Prop.
    (* Message which states that, the receiving_bottle has been filled at time t with the milk of cow c. *)
    (* Look if the bottle is full or not. *)

Variable bottle_filled (* t *): T -> Prop.
    (* The receiving_bottle is full at time t, which results in the power of the power_strip being turned off. *)
    (* Look if the bottle is full at that time. *)

    

    
(* ====================================================================== *)

(* Auxiliary predicates (including their meaning) *)

(*
   [
     At this place within this template you may define as many
     auxiliary predicates as you want, but do not forget to include
     their meaning.
   ]
*)

(* ====================================================================== *)

(* Components *)

(*
   [
     For each component you have to specify the following information:
    
     OUTSIDE comment markers:
     - The 'Definition' to be read by Coq, in a readable layout that
       matches the mathematical structure of the formula.

     WITHIN comment markers:
     - The specification of the component in natural language. Obviously,
       this specification should be consistent with the formula used
       by Coq.
     - If appropriate, a short explanation in natural language about
       the choices that have been made.
   ]
*)

Definition power_strip :=
  forall t:T,
     power_in t /\ ~bottle_filled t
   ->
     ps_out (t+2)
.
(* If at time t power_in is supplied to the power_strip,
then 2/10ths of a second later, a voltage of 230V is supplied from the power_strip. *)

Definition power_cable_1 :=
  forall t:T,
     ps_out t
   ->
     vacuum_power (t+1)
.
(* If at time t ps_out is supplied to power_cable_1, then 1/10ths of a second later
a voltage of 230V is supplied from power_cable_1. *)

Definition power_cable_2 :=
  forall t:T,
     ps_out t
   ->
     pulsator_power (t+1)
.
(* If at time t, ps_out is supplied to power_cable_2, then 1/10ths of a second later
a voltage of 230V is supplied from power_cable_2. *)

Definition vacuum_pump :=
    forall t:T,
           (
            forall d:T,
               d in (0, 70]
             ->
               vacuum_power (t+d)
           )
        ->
           vacuum_out (t+70)   
.
(* If it is the case that if for all time d, d is between 0 up to and including 70, then 
a voltage of 230V is supplied from power_cable_1 at time t+d, 
then a vacuum of 15 HG causes air escaping into the vacuum_tube 70/10ths of a second later. *)

Definition vacuum_tube :=
  forall t:T,
     vacuum_out t
   ->
     vacuum_in  (t+8)
.   
(* If there is a vacuum of 15 Hg supplied by the vacuum_pump at time t, then 8/10ths of a second later,
a vacuum of 15 Hg is supplied by the vacuum_tube. *)

Definition pulsator :=
  forall t:T,
       (
        forall p:T,
            p in (0, 2]
          ->
              pulsator_power (t+p)
            /\
              vacuum_in (t+p)
       )
    ->
      vacuum_pulses_out (t+2)
.

(* If it is the case that if for all time p, p is between 0 up to and including 2, then 
a voltage of 230V is supplied from power_cable_2 and a vacuum of 15 Hg supplied by the vacuum_tube at time t+p, 
then pulses of vacuum are being supplied to the pulsator_cup_cable at time t+2. *)

Definition pulsator_cup_cable :=
  forall t:T,
     vacuum_pulses_out t
    ->
     vacuum_pulses_in (t+8)
.   

(* If there are pulses of vacuum being supplied by the pulsator at time t, then 8/10ths of a second later,
pulses of vacuum are being supplied to the teat_cups. *)

Definition teat_cups:=
  forall t:T,
      forall c:Cows,
            (
             forall d:T,
                d in (0,10]
              ->
               vacuum_pulses_in (t+d)
            )
          /\
            cow_teats_in t (teatsFromCow c)
        ->
          milk_out (t+10) c
.
(* If it is the case that if for all time d, d is between 0 up to and including 10, then 
pulses of vacuum are being supplied to the teat_cups at time t+d, and the teats of cow c are in the teat_cups at time t,
then milk of cow c comes out of the teat_cups at time t+10. *) 


Definition milk_tube:=
    forall t:T,
        forall c:Cows,
           milk_out t c
         ->
           bottle_being_filled (t+10) c
.
(*If milk of cow c comes out of the teat_cups at time t, then 10/10 tenths of a second later,
the receiving_bottle is being filled with milk from cow c.*)

Definition receiving_bottle:=
    forall t:T,
        forall c:Cows,
            (
             forall d:T,
                 d in (0, milking_time c]
              ->
                 bottle_being_filled (t+d) c
            )
          ->
              filled_message (t+milking_time c) c /\ bottle_filled (t+milking_time c)

.

(* If it is the case that if for all time d, d is between 0 up to and 
including the time it takes to milk that cow c, then the receiving_bottle is being filled with milk at time t+d from cow c,
then t + the amount of time it takes to milk the cow c later, 
a message is presented that the receiving_bottle has been filled with the milk of cow c
and at the same time a signal is sent to the power_strip that the bottle has been filled. *)




(* ====================================================================== *)

(* Specification of the overall system *)

(*
   [
     Here you have to specify:

     OUTSIDE comment markers:
     - The 'Definition' to be read by Coq, in a readable layout that
       matches the mathematical structure of the formula.

     WITHIN comment markers:
     - The specification of the overall system in natural language.
       Obviously, this specification should be consistent with the
       formula used by Coq.
     - If appropriate, a short explanation in natural language about
       the choices that have been made.
   ]
*)

Definition simplified_cow_milking_machine:=
     forall t:T,
         forall c:Cows,
             (
               exists w:T,
                  w in (t+81+2+8, t+81+2+8+60]
                /\
                  (
                    forall u:T,
                        u in [0, milking_time c] 
                      ->
                        cow_teats_in (w+u) (teatsFromCow c)
                  )
                /\
                  (
                    forall s:T,
                        s in (t, w+20+milking_time c]
                      ->
                        power_in s /\ ~bottle_filled s
                  )
             )
           ->
             (
               exists v:T,
                  filled_message (v+milking_time c) c /\ bottle_filled (v+milking_time c)
             )
.
    
(* Specification of the overall system *)
(* If there is a time w that is between t+81+2+8 and up to t+81+2+8+60 and 
for all time u, u is between 0 up to and including the time it takes to milk cow c,
then the teats of cow c are in the teat_cups at time w+u,
and for all time s, s is between t up to and including w+20+ the time it takes to milk cow c,
then power is supplied to the power_strip and there is no signal stating that the bottle has been filled, 
then there is a time v+the time it takes to milk cow c, in which a message is presented that the receiving_bottle has been filled with the milk of cow c
and at the same time a signal is sent to the power_strip that the bottle has been filled. *)


(* ====================================================================== *)

(* Extras *)


Hypothesis boundedMilkingTime :
forall c:Cows,
   (milking_time c)  in [1800,2400]
.

(* This hypothesis states that the receiving_bottle is filled between 1800 and 2400 tenths of seconds.
It limits the cow dependent milking time. *)



(*
   [
     It is very likely that you do not need any extras!

     However, if it turns out during your proof that you have to prove
     several times (almost) the same, then you may define a 'Lemma' at
     this place, followed by its proof. And in the proof of the correctness
     theorem, you may apply this lemma several times.
     Note that it is always allowed to add lemmas to this script!

     Sometimes it happens that Coq has troubles with 'trivial' properties
     of numbers, that cannot be solve easily using 'lin_solve'.
     In such situations, you may contact your supervisor and discuss
     whether this may be solved by adding an 'Axiom', which can also be
     applied later on within the proof of the correctness theorem.
   ]
*)

(* Correctness theorem *)

(* ====================================================================== *)

(*
   [
     Write down your correctness theorem in the usual notation:
     Theorem CorTheorem:
         power_strip
        /\
         power_cable_1
        /\
         power_cable_2
        /\
         vacuum_pump
        /\
         vacuum_tube
        /\
         pulsator
        /\
         pulsator_cup_cable
        /\
         teat_cups
        /\
         milk_tube
        /\
         receiving_bottle
     ->
        simplified_cow_milking_machine.

     Note that for the intermediate version, you should keep this
     theorem within comment markers, otherwise you will get a red cross
     for stating a theorem without a proof.
   
     For the final version you obviously have to remove these comment
     markers and probide a real proof!
   ]
*)

Theorem CorTheorem:
         power_strip
        /\
         power_cable_1
        /\
         power_cable_2
        /\
         vacuum_pump
        /\
         vacuum_tube
        /\
         pulsator
        /\
         pulsator_cup_cable
        /\
         teat_cups
        /\
         milk_tube
        /\
         receiving_bottle
     ->
        simplified_cow_milking_machine.
   
Proof.



splitAss.
imp_i powerStrip.
imp_i powerCable1.
imp_i powerCable2.
imp_i vacuumPump.
imp_i vacuumTube.
imp_i pulsator1.
imp_i pulsatorCupCable.
imp_i teatCups.
imp_i milkTube.
imp_i receivingBottle.
unfold simplified_cow_milking_machine.
all_i t0.
all_i b.
imp_i ass2.


exi_e ( (exists w : T,
            w in  (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60] /\
             (forall u : T,
            u in  [0, milking_time b] ->
            cow_teats_in (w + u) (teatsFromCow b)) /\
           (forall s : T, s in  (t0, w + 20 + milking_time b] -> power_in s /\ ~bottle_filled s))) tteats ass4.

hyp ass2.
exi_i (tteats+20).
unfold receiving_bottle in receivingBottle.


imp_e  (forall d : T,
                     d in  (0, milking_time b] ->
                     bottle_being_filled (tteats+20 + d) b ).
                     
                     
all_e (  forall  (c : Cows),
                    (forall d : T,
                     d in  (0, milking_time c] ->
                     bottle_being_filled (tteats+20 + d) c) ->
                    filled_message (tteats+20 + milking_time c) c /\ bottle_filled (tteats+20 + milking_time c) ) b.
all_e (forall (t : T) (c : Cows),
                    (forall d : T,
                     d in  (0, milking_time c] ->
                     bottle_being_filled (t + d) c) ->
                    filled_message (t + milking_time c) c /\ bottle_filled (t + milking_time c)) (tteats+20).
                    

hyp receivingBottle.

unfold milk_tube in milkTube.
fold receiving_bottle in receivingBottle.

all_i tmilking.
imp_i ass5.
replace (  tteats+20+tmilking) with (tteats+10+tmilking+10).

Focus 2.
lin_solve.

imp_e (milk_out (tteats+10+tmilking) b).
all_e ( forall  (c : Cows),
             milk_out (tteats+10+tmilking) c -> bottle_being_filled ((tteats+10+tmilking) + 10) c  ) b.
             
all_e ( forall (t : T) (c : Cows),
             milk_out t c -> bottle_being_filled (t + 10) c  ) (tteats+10+tmilking).
             
hyp milkTube.
fold milk_tube in milkTube.

unfold teat_cups in teatCups.
replace (tteats +10+tmilking) with (tteats+tmilking+10).

Focus 2.
lin_solve.

imp_e ((forall d : T, d in  (0, 10] -> vacuum_pulses_in (tteats+tmilking + d)) /\
             cow_teats_in (tteats+tmilking) (teatsFromCow b)).
all_e ( forall (c : Cows),
             (forall d : T, d in  (0, 10] -> vacuum_pulses_in (tteats+tmilking + d)) /\
             cow_teats_in (tteats+tmilking) (teatsFromCow c) -> milk_out (tteats+tmilking + 10) c  ) b.
all_e ( forall (t : T) (c : Cows),
             (forall d : T, d in  (0, 10] -> vacuum_pulses_in (t + d)) /\
             cow_teats_in t (teatsFromCow c) -> milk_out (t + 10) c) (tteats+tmilking).

hyp teatCups.
fold teat_cups in teatCups.

con_i.

(* vacuum_pulses_in*)
all_i tvacuum.
imp_i ass6.

unfold pulsator_cup_cable in pulsatorCupCable.
replace ( tteats + tmilking + tvacuum  )  with (tteats + tmilking + tvacuum -8 +8).
Focus 2.
lin_solve.

imp_e (vacuum_pulses_out (tteats + tmilking + tvacuum - 8)).
all_e (  forall t : T,
                     vacuum_pulses_out t -> vacuum_pulses_in (t + 8)  ) (tteats + tmilking + tvacuum - 8).
hyp pulsatorCupCable .

fold pulsator_cup_cable in pulsatorCupCable.


(*cow_teats_in*)
Focus 2.

imp_e (tmilking in [0,milking_time b]). 
all_e (  (forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b)) ) tmilking.

con_e1 ((forall s : T,
          s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s)).
con_e2 ( tteats in  (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60]  ).
hyp ass4.

interval.
con_i.
imp_e (0<tmilking).
imp_i trick.
lin_solve.
con_e1 ( tmilking <= milking_time b ).
hyp ass5.

con_e2 (0<tmilking).
hyp ass5.

(*vacuum_pulses_out; pulsator*)
unfold pulsator in pulsator1.

replace (tteats + tmilking + tvacuum - 8) with (tteats + tmilking + tvacuum - 8-2+2).
imp_e (forall p:T, p in  (0, 2] -> pulsator_power (tteats + tmilking + tvacuum -8 -2 + p) /\ vacuum_in (tteats + tmilking + tvacuum -8 -2 + p)).
all_e (forall t:T, ((forall p : T,
    p in  (0, 2] ->
    pulsator_power (t + p) /\
    vacuum_in (t + p)) ->
   vacuum_pulses_out (t + 2))) (tteats + tmilking + tvacuum - 8 - 2).
hyp pulsator1.

Focus 2.
lin_solve.

(*vacuum_in; vacuumTube*)
fold pulsator in pulsator1.
unfold vacuum_tube in vacuumTube  .

all_i tvacuumin.
imp_i ass7.

con_i.
Focus 2.

replace (tteats + tmilking + tvacuum - 8 - 2 + tvacuumin) with (tteats + tmilking + tvacuum - 10 + tvacuumin -8+8).
imp_e (vacuum_out (tteats + tmilking + tvacuum -10 + tvacuumin - 8)).
all_e (forall t : T, vacuum_out t -> vacuum_in (t+8)) (tteats + tmilking + tvacuum - 10 + tvacuumin - 8).
hyp vacuumTube.

fold vacuum_tube in vacuumTube  .

(*
Focus 2.
lin_solve.
*)

(*vacuum_out; vacuumPump*)
(*
Focus 2.
*)


unfold vacuum_pump in vacuumPump.

replace (tteats + tmilking + tvacuum - 10 + tvacuumin - 8) with (tteats + tmilking + tvacuum - 18 + tvacuumin -70+70).

imp_e (forall d : T, d in  (0, 70] -> vacuum_power (tteats + tmilking + tvacuum - 18 + tvacuumin - 70 + d)).
all_e (forall t : T,
               (forall d : T, d in  (0, 70] -> vacuum_power (t + d)) ->
               vacuum_out (t + 70)) (tteats + tmilking + tvacuum - 18 + tvacuumin - 70).
hyp vacuumPump.

(*Focus 2.*)

(*lin_solve.*)
fold vacuum_pump in vacuumPump.

(*vacuum_power ; powerCable1*)
(*Focus 2.*)
unfold power_cable_1 in powerCable1 .

all_i vacuumPumpDelay.
imp_i ass8.
replace (tteats + tmilking + tvacuum - 18 + tvacuumin - 70 + vacuumPumpDelay) with (tteats + tmilking + tvacuum - 88 + tvacuumin + vacuumPumpDelay-1+1).
imp_e(ps_out (tteats + tmilking + tvacuum - 88 + tvacuumin + vacuumPumpDelay - 1)).
all_e(forall t : T, ps_out t -> vacuum_power (t + 1))(tteats + tmilking + tvacuum - 88 + tvacuumin + vacuumPumpDelay - 1).
hyp powerCable1.

(*
Focus 2.
lin_solve.
*)

fold power_cable_1 in powerCable1 .

(*ps_out; powerCable2*)
(*Focus 2.*)
unfold power_strip in powerStrip.


replace (tteats + tmilking + tvacuum - 88 + tvacuumin + vacuumPumpDelay - 1) with (tteats + tmilking + tvacuum - 89 + tvacuumin + vacuumPumpDelay -2+2).
imp_e(power_in(tteats + tmilking + tvacuum - 89 + tvacuumin + vacuumPumpDelay - 2) /\ ~bottle_filled(tteats + tmilking + tvacuum - 89 + tvacuumin + vacuumPumpDelay - 2)).
all_e(forall t : T, power_in t /\ ~bottle_filled t -> ps_out (t + 2)) (tteats + tmilking + tvacuum - 89 + tvacuumin + vacuumPumpDelay - 2).

hyp powerStrip.
fold power_strip in powerStrip.

(*
Focus 2.
lin_solve.
*)


(*
unfold power_cable_2 in powerCable2.
*)

con_i.

replace (tteats + tmilking + tvacuum - 89 + tvacuumin + vacuumPumpDelay - 2) with (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay).

con_e1 (~bottle_filled (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay)).


imp_e (  (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay) in  (t0, tteats + 20 + milking_time b]).
all_e (forall s : T, s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s) (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay).
con_e2 ( (forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b))).
con_e2(tteats in  (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60]).
hyp ass4.

interval.
con_i.



imp_e(t0+91<tteats).
imp_i ass9. 
imp_e (0<tmilking).
imp_i ass10.
imp_e (0< tvacuum).
imp_i ass11.
imp_e (0<tvacuumin).
imp_i ass12.
imp_e (0<vacuumPumpDelay). 
imp_i ass13.


lin_solve.

con_e1 (vacuumPumpDelay <=70).

hyp ass8.

con_e1 (tvacuumin <=2).
hyp ass7.

con_e1(tvacuum <=10).
hyp ass6.

con_e1 (tmilking <= milking_time b).
hyp ass5.
 
replace (t0+ 91) with (t0+81+2+8). 
con_e1(tteats <= t0 + 81 + 2 + 8 + 60).
con_e1 ((forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b)) /\
         (forall s : T,
          s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s)).
hyp ass4.




 



lin_solve.

 
imp_e (tteats in (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60]).  
imp_i ass9.

imp_e (tmilking <= milking_time b).
imp_i ass10.

(*imp_e (tvacuum - 91 + tvacuumin + vacuumPumpDelay < 20).
imp_i ass11.
 




w


lin_solve.*)

imp_e (tvacuum <= 10).
imp_i ass12.

imp_e (tvacuumin <=2).
imp_i ass13.

imp_e (vacuumPumpDelay <=70).
imp_i ass14.

lin_solve.

con_e2 (0<vacuumPumpDelay).
hyp ass8.

con_e2 (0<tvacuumin).
hyp ass7.

con_e2 (0<tvacuum).
hyp ass6.

con_e2 (0< tmilking).
hyp ass5.

con_e1 ((forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b)) /\
         (forall s : T,
          s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s)).
hyp ass4.
lin_solve.






replace (tteats + tmilking + tvacuum - 89 + tvacuumin + vacuumPumpDelay - 2) with (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay).

con_e2 (power_in (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay)).


imp_e (  (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay) in  (t0, tteats + 20 + milking_time b]).
all_e (forall s : T, s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s) (tteats + tmilking + tvacuum - 91 + tvacuumin + vacuumPumpDelay).
con_e2 ( (forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b))).
con_e2(tteats in  (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60]).
hyp ass4.

interval.
con_i.



imp_e(t0+91<tteats).
imp_i ass9. 
imp_e (0<tmilking).
imp_i ass10.
imp_e (0< tvacuum).
imp_i ass11.
imp_e (0<tvacuumin).
imp_i ass12.
imp_e (0<vacuumPumpDelay). 
imp_i ass13.


lin_solve.

con_e1 (vacuumPumpDelay <=70).

hyp ass8.

con_e1 (tvacuumin <=2).
hyp ass7.

con_e1(tvacuum <=10).
hyp ass6.

con_e1 (tmilking <= milking_time b).
hyp ass5.
 
replace (t0+ 91) with (t0+81+2+8). 
con_e1(tteats <= t0 + 81 + 2 + 8 + 60).
con_e1 ((forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b)) /\
         (forall s : T,
          s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s)).
hyp ass4.




 



lin_solve.

 
imp_e (tteats in (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60]).  
imp_i ass9.

imp_e (tmilking <= milking_time b).
imp_i ass10.

(*imp_e (tvacuum - 91 + tvacuumin + vacuumPumpDelay < 20).
imp_i ass11.
 







lin_solve.*)

imp_e (tvacuum <= 10).
imp_i ass12.

imp_e (tvacuumin <=2).
imp_i ass13.

imp_e (vacuumPumpDelay <=70).
imp_i ass14.

lin_solve.

con_e2 (0<vacuumPumpDelay).
hyp ass8.

con_e2 (0<tvacuumin).
hyp ass7.

con_e2 (0<tvacuum).
hyp ass6.

con_e2 (0< tmilking).
hyp ass5.

con_e1 ((forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b)) /\
         (forall s : T,
          s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s)).
hyp ass4.
lin_solve.
lin_solve.
lin_solve.
lin_solve.
lin_solve.

unfold power_cable_2 in powerCable2.
replace (tteats + tmilking + tvacuum - 8 - 2 + tvacuumin) with (tteats + tmilking + tvacuum - 8 - 2 + tvacuumin -1 + 1).

imp_e (ps_out (tteats + tmilking + tvacuum - 8 - 2 + tvacuumin -1)).
all_e (forall t:T, (ps_out t -> pulsator_power (t + 1))) (tteats + tmilking + tvacuum - 8 - 2 + tvacuumin -1).

hyp powerCable2.

fold power_cable_2 in powerCable2.
unfold power_strip in powerStrip.

replace (tteats + tmilking + tvacuum - 8 - 2 + tvacuumin - 1) with (tteats + tmilking + tvacuum +tvacuumin - 13 + 2).

imp_e (power_in (tteats + tmilking + tvacuum +tvacuumin - 13) /\ ~bottle_filled(tteats + tmilking + tvacuum +tvacuumin - 13)).
all_e (forall t:T, (power_in t /\ ~bottle_filled (t) -> ps_out (t + 2))) (tteats + tmilking + tvacuum +tvacuumin - 13).

hyp powerStrip.

imp_e (tteats + tmilking + tvacuum + tvacuumin - 13 in  (t0, tteats + 20 + milking_time b]).


all_e (forall s : T, s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s) (tteats + tmilking + tvacuum + tvacuumin - 13).
con_e2 ( (forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b))).
con_e2(tteats in  (t0 + 81 + 2 + 8, t0 + 81 + 2 + 8 + 60]).
hyp ass4.

interval.

con_i.

imp_e(t0+81+2+8<tteats).
imp_i ass8. 
imp_e (0<tmilking).
imp_i ass9.
imp_e (0< tvacuum).
imp_i ass10.
imp_e (0<tvacuumin).
imp_i ass11.

lin_solve.

con_e1 (tvacuumin <=2).
hyp ass7.

con_e1(tvacuum <=10).
hyp ass6.

con_e1 (tmilking <= milking_time b).
hyp ass5.
 
con_e1(tteats <= t0 + 81 + 2 + 8 + 60).
con_e1 ((forall u : T,
          u in  [0, milking_time b] ->
          cow_teats_in (tteats + u) (teatsFromCow b)) /\
         (forall s : T,
          s in  (t0, tteats + 20 + milking_time b] -> power_in s /\ ~bottle_filled s)). 
hyp ass4.

imp_e (tmilking <= milking_time b).
imp_i ass10.

imp_e (tvacuum <= 10).
imp_i ass12.

imp_e (tvacuumin <=2).
imp_i ass13.

lin_solve.

con_e2 (0<tvacuumin).
hyp ass7.

con_e2 (0<tvacuum).
hyp ass6.

con_e2 (0< tmilking).
hyp ass5.

lin_solve.
lin_solve.

Qed.

